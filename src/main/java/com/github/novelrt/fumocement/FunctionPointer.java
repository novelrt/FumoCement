// Copyright Â© Matt Jones and Contributors. Licensed under the MIT License (MIT). See LICENCE.md in the repository root for more information.

package com.github.novelrt.fumocement;

/**
 * Represents a function pointer managed by Java and the FumoCement library.
 * The code generated by Clangsharp is required to make use of this class.
 * <p>
 * In order to be compatible with FumoCement, the method signature must
 * fulfill the following requirement.<br>
 * <b>A function pointer must have take a {@code void*} parameter at the end of the parameter list.
 * The parameter next to this function pointer must be of type {@code void*}. Its value
 * must be always passed as the last argument when the function pointer is called.
 * </b>
 * <p>
 * The java callback will return the {@code Ret} type and take all parameters in {@code Args}
 * as referred in the following code example.
 * <blockquote>
 * <code>method(..., Ret(*function)(Args..., void*), void* context, ...)</code>
 * </blockquote>
 *
 * @param <C> the type of the callback
 */
public final class FunctionPointer<C> extends NativeObject {
    private final C callback;

    public FunctionPointer(C callback, DisposalMethod disposalMethod) {
        super(createPointerContext(callback), true, disposalMethod, FunctionPointer::destroyPointerContext);
        this.callback = callback;
    }

    private static native long createPointerContext(Object object);

    private static native void destroyPointerContext(long handle);

    public C getCallback() {
        return callback;
    }

    @Override
    public @Pointer("FumoCement::FunctionPointerContext*") long getHandle() {
        return super.getHandle();
    }
}
